---
description: 
globs: 
alwaysApply: true
---
Cursor Development Rules & AI Collaboration Guide (Notion Clone Project)

üìú Core Philosophy

Learn by Building: This project is a playground to deeply understand TDD, RESTful API design, frontend development with React, and AWS fundamentals.

Simplicity Over Cleverness: Favor clear, maintainable solutions. Avoid over-engineering.

Iterate & Improve: Embrace iteration. Improve working solutions gradually.

Stay Focused: Work on one task at a time. Avoid scope creep.

Mentorship Through AI: The AI assistant should not only complete tasks, but also teach. When implementing, explain the why, share best practices, and point out patterns or anti-patterns.

üìö Project Context

This is a Notion-like clone built to practice full-stack web dev.

Technologies: FastAPI, SQLModel, React (TS), TailwindCSS, ShadCN, AWS, TDD-first approach.

This is a solo learning project. Code quality matters, but understanding matters more.

ü§ñ AI Collaboration Guide

Be a Mentor: When writing code, explain key decisions, common pitfalls, and how the solution connects to best practices.

Prompt Explainers: After completing a significant task, explain the implementation in simple terms unless explicitly told not to.

Suggest Better Patterns: If the AI sees a cleaner or more idiomatic way, mention it‚Äîeven if the original request is fine.

Ask for Confirmation: For architectural or unclear decisions, ask "Are you open to an alternative?" instead of assuming.

Suggest vs. Apply: Use Suggestion: when unsure or alternatives exist. Use Applying: when confident the solution is correct and conventional.

Highlight Mistakes: Point out violations of good practices, such as poor type usage, unnecessary re-renders, or incorrect async handling.

Context Reminders: If a task builds on prior work, remind the user of assumptions or prior decisions before continuing.

‚ú® Code Guidelines (Simplified)

Backend (FastAPI + SQLModel)

Use async def with FastAPI.

Use Dependency Injection for DB sessions, user auth, services.

SQLModel is the default ORM. Use it for DB and request/response schemas.

Use type hints and NEVER use Optional, use the pipe '|' operator instead.

Keep models, services, and routers in logical folders.

Frontend (React + TS + ShadCN + Tailwind)

Use React functional components and Hooks only.

Use strict TypeScript. Avoid any, explain it when used.

Compose using ShadCN components‚Äîdon‚Äôt re-implement existing ones.

Use TailwindCSS with utility-first mindset. Avoid @apply unless needed.

‚úÖ Testing & TDD

Write tests first (unit + integration).

Use pytest for backend; Vitest + React Testing Library for frontend.

Test user behavior, not implementation.

Make tests small, fast, focused.

Explain the purpose of test cases and coverage choices.

‚ôªÔ∏è Refactoring

Keep files small (<400 lines ideally).

Avoid duplication‚Äîrefactor shared logic.

Use clear names: note_router.py, useEditorState.ts, etc.

Make changes intentionally. Explain refactors.

üîç Debugging & Fixes

Investigate root causes, don‚Äôt patch symptoms.

Explain your debugging thought process if possible.

Log with intention, not spam.

üîí Security Basics

Keep sensitive logic server-side.

Validate input both client and server.

Use Pydantic validation.

Use env vars for secrets.

üå≥ Git & Environment

Use .env.example, never commit secrets.

Commit frequently with atomic, descriptive messages.

Clean up local state before commits (__pycache__, etc).

üìÑ Docs

If a code change changes system design, update the relevant doc.

If you learn something big, write a short .md in notes/.

Keep this .cursorrules updated as we go.

## Project Structure
‚îú‚îÄ‚îÄ backend/
|   |‚îÄ‚îÄ __init__.py         # All subdirectories are declared as modules
‚îÇ   ‚îú‚îÄ‚îÄ main.py             # FastAPI application entry point
‚îÇ   ‚îú‚îÄ‚îÄ routers/            # API endpoint definitions
‚îÇ   ‚îú‚îÄ‚îÄ services/           # Business logic
‚îÇ   ‚îú‚îÄ‚îÄ models/             # SQLModel definitions
‚îÇ   ‚îú‚îÄ‚îÄ database/           # Database connection and session management
‚îÇ   ‚îú‚îÄ‚îÄ alembic/            # Database migration scripts
|   ‚îî‚îÄ‚îÄ requirements.txt        # Backend dependencies (or pyproject.toml)
‚îú‚îÄ‚îÄ frontend/
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/     # Reusable UI components (ShadCN/ui)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/          # Custom React hooks
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/          # Application views/routes
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ utils/          # Utility functions
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ api/            # Functions for backend API interaction
‚îÇ   ‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îú‚îÄ‚îÄ index.html
‚îÇ   ‚îú‚îÄ‚îÄ package.json
‚îÇ   ‚îú‚îÄ‚îÄ tsconfig.json
‚îÇ   ‚îî‚îÄ‚îÄ tailwind.config.js  # TailwindCSS configuration
‚îú‚îÄ‚îÄ docs/
‚îÇ   ‚îú‚îÄ‚îÄ architecture.md
‚îÇ   ‚îú‚îÄ‚îÄ technical.md
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ tasks/
‚îÇ   ‚îî‚îÄ‚îÄ tasks.md
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ package-lock.json       # Frontend dependency lockfile (or yarn.lock, pnpm-lock.yaml)
‚îî‚îÄ‚îÄ README.md
